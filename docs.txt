Task 1:

Run public Docker Image:

1. Create a new VM 
2. Login vm: `gcloud compute ssh --zone "us-central1-c" "my-test-vm" --project "gcp-docker-cicd”`
3. Run following command to install Docker in your VM
    sudo apt update && sudo apt upgrade -y
    sudo apt install -y docker.io
    sudo systemctl enable --now docker
4. Add Your User to the Docker Group
    sudo usermod -aG docker $USER
    newgrp docker
5. Pull public docker image: `docker pull pengbai/docker-supermario`
6. Run docker `docker run -d -p 80:8080 pengbai/docker-supermario` ; this will run in the default port 80 
7. Create a firewall rule for port 8600 and assign it to project 
8. Run docker `docker run -d -p 8600:8080 pengbai/docker-supermario` ; this will run in the custom port 8600 







Task 2:

Custom image and Python and Django

For local testing: 

1. Install Python and pip:

    sudo apt install -y python3 python3-pip python3-venv

2. Create a virtual environment for your Django project:

mkdir django-app && cd django-app
python3 -m venv venv
source venv/bin/activate

3. Install Django and other dependencies:

pip install django gunicorn

4. Create a Django project:

django-admin startproject myproject .

5. Run server 

python manage.py runserver 0.0.0.0:8000



For Image:


1. Create a requirements.txt

pip freeze > requirements.txt

2. Create a Dockerfile

# Use an official Python image from the Docker Hub
FROM python:slim-bullseye


# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app/

# Install dependencies from requirements.txt
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Expose port 8000 for the Django app
EXPOSE 8000

# Run gunicorn to serve the Django app
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "myproject.wsgi:application"]



3. Create a .dockerignore File


    venv
    __pycache__
    *.pyc
    *.pyo
    *.pyd
    db.sqlite3


4. Build the Docker Image

In the django-app directory, run:

    docker build -t django-app .


5. Check if the build was successful:

    docker images


6. Run the Docker Container

    docker run -d -p 8000:8000 django-app


7. Push the Docker Image to Google Container Registry (GCR)

    docker tag django-app gcr.io/gcp-docker-cicd/django-app:latest

8. Authenticate with GCP:

    gcloud auth configure-docker

9. Push the image to GCR:

    docker push gcr.io/gcp-docker-cicd/django-app:latest
10. 




Run Docker Image from GCR (Optional)

11. If you pushed the image to GCR, you can pull and run it from any machine, including GCP VMs.


    docker pull gcr.io/gcp-docker-cicd/django-app:latest

12. Run the container:

    docker run -d -p 8088:8000 gcr.io/gcp-docker-cicd/django-app:latest





